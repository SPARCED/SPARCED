# SPARCED-tools Installation Guide

_Written by Aurore Amrit_ *and Jonah R. Huggins*

## Overview

Kinetic models are often reliant on Ordinary Differential Equation solvers to perform the simulated 'heavy-lifting'. Given the Large-scale nature of the SPARCED model, we use [AMICI (v0.11.12)](https://amici.readthedocs.io/en/v0.11.12/), an ODE solver specifically made for large-scale kinetic modeling. However, AMICI's reliance on C/C++ solvers as well as BLAS, complicate straightforward installation outside of Ubuntu. Therefore, we have tried to be as accomodating as possible to the broad community in enabling cross-platform support.

SPARCED runs seamlessly on **Ubuntu 22.04 LTS** , either as a virtual machine (i.e. **VirtualBox**), a container (**Singularity** or **Dockerfile**), or on **Windows-Subsystem for Linux.** This guide should work even if you are using another hypervisor than VirtualBox or that you are running Ubuntu directly on your computer. With a few arrangements, the described steps should also work for other versions of Ubuntu or any Debian-based Linux distribution.

‚ö†Ô∏è Make sure you have enough disk space (30 GB is a minimum) ‚ö†Ô∏è

## Modeler's Installation Guide

For most users, operation through a docker container will be sufficient. This provides an OS-agnostic approach for users to interact with SPARCED simulation tools without having to hassle with the SPARCED package dependencies. For HPC use, see Singularity Installation.

### Docker Installation

For users with administrator access, (i.e. Linux, MacOS and Windows), we strongly recommend installing the Docker container. [Docker (the software) can be installed here](*[Docker](https://docs.docker.com/get-started/get-docker/)).

Preferred installation: Download from [DockerHub](https://hub.docker.com/)

```
docker pull jonahrileyhuggins/sparced-tools:latest
```

Alternatively, the Docker container can be built locally:

```
docker buildx build -t sparced-tools -f /path/to/SPARCED/container/Dockerfile .
```

Operating inside of the container enables the use of the SPARCED toolset without having to install the python dependencies.

```
docker run -it sparced-tools
```

Further, users are able to bind their local SPARCED directory with the container's SPARCED directory, allowing for native, local modifications on the host system:

```
docker run -it --rm -v C:\Users\<username>\path\to\SPARCED:/SPARCED sparced-tools
```

**Flags:**

**`--rm`**

* **Stands for:** *Remove*
* **Function:** Automatically removes the container when it stops
* **Why use it**
  * Prevents the accumulation of stopped containers that would otherwise take up system resources.
  * Useful for temporary containers where you don't need to persist the container itself after it has run.

**`-i`**

* **Stands for:** *Interactive*
* **Function:** Keeps the standard input (`stdin`) open, even if not attached to a terminal.
* **Why use it?**
  * Allows the container to accept input from the user during runtime.
  * Especially useful when paired with `-t` for running an interactive shell session.

**`-t`**

* **Stands for:** *TTY (teletypewriter)*
* **Function:** Allocates a pseudo-terminal for the container.
* **Why use it?**
  * Allows for better interactivity, like being able to run `bash` or `sh` inside the container and see a command prompt.
  * Often paired with `-i` for fully interactive sessions.

**`-v`**

* **stands for:** Volume
* **Function:** Binds a directory to the container volume. In simpler terms, it allows users to link a local directory to a container directory, enabling files to be shared between.
* **Why use it?**
  * Allows for seamless operation of the SPARCED tools on a users personal device with full file sharing as if the tool was installed locally.


### Singularity Installation

[Singularity](https://docs.sylabs.io/guides/3.0/user-guide/installation.html) is a containerization platform designed specifically for high-performance computing (HPC) and research environments. It allows users to create, distribute, and execute portable, reproducible containers across different systems. Unlike Docker, Singularity focuses on usability in environments where users don't have root access, such as shared HPC clusters.

**Key Features:**

1. **Rootless Execution:** Users don't need root privileges to run containers, enhancing security.
2. **File System Binding:** Provides seamless integration with the host system by binding directories into the container.
3. **Portability:** Containers can be moved and executed across different platforms without modification.
4. **Support for MPI:** Well-suited for parallel computing environments, allowing easy integration with MPI libraries.

---

#### Building the Singularity Container from a Definition File

To build a container using the `sparced.def` file, execute the following command from the project root directory:

```bash
singularity build --fakeroot container/sparced.sif container/sparced.def
```

* **`sparced.sif`:** The output file, a Singularity Image File (SIF).
* **`sparced.def`:** The definition file that specifies the container's environment and setup.
* **`--fakeroot`:** Flag for building the singularity container without root access

To verify that the container is successfully built, execute the following:

```bash
singularity inspect container/sparced.sif
```

---

#### How to Shell into and Interact with the Singularity Container While Binding the Host SPARCED Directory

1. **Bind the Host Directory:**
   Use the `--bind` option to link a host directory into the container.
2. **Run the Container:**
   To open a shell inside the container with the `SPARCED` directory bound:

   ```bash
   singularity shell --bind /path/to/host/SPARCED:/SPARCED container/sparced.sif
   ```

   * **`/path/to/host/SPARCED`:** Replace this with the absolute path to your host's SPARCED directory.
   * **`/SPARCED`:** This is the directory inside the container where the host directory will be accessible.
3. **Operate Within the Container:**
   Once inside the container, you‚Äôll see a prompt. Run commands as if you‚Äôre working on a standalone system:

   ```bash
   sparced compile -n Basic_model
   ```
4. **Exit the Container:**
   Type `exit` to leave the container.

---

If successful, the below configurations are not necessary. This is a conda-free installation.

## Developer's Installation Guide

### Ubuntu-based Installation

The ` requirements.txt` file provided in the project root directory is an executable BASH script designed to install SPARCED dependencies in Ubuntu 22.04. Installation is seamless when using the `requirements.txt` file, which is reliant on a [PEP 621 - adherent](https://peps.python.org/pep-0621/) `pyproject.toml` file located adjacently in the project root directory.

To install, execute the following commands within the SPARCED root directory:

```bash
chmod +x ./requirements.txt # provides authorized installation access
./requirements.txt # Installation command
```

After installation is complete, restart your shell for the changes to take effect.

#### Installation verification

After installation is complete, test the installation via:

```bash
sparced -h
```

‚ö†Ô∏è Note: Ubuntu users might have to restart their shell session for the changes to take effect. ‚ö†Ô∏è

Correct installation should output the following help information:

```
usage: SPARCED [-h] {compile,simulate,validate} ...

SPARCED CLI tool.

positional arguments:
  {compile,simulate,validate}
                        Subcommands: compile, simulate, validate, visualize
    compile             Compile a model.
    simulate            Run a simulation.
    validate            Benchmark a model.
    visualize           Visualize a dataset.

options:
  -h, --help            show this help message and exit
```

### Anaconda-based Installation

For further support, an Anaconda `environment.yml` is provided. Note, installation via Anaconda inhibits the use of the command line functionality. Individual scripts are still executable, an example is provided below.

```
# Send critical install variables to the .bashrc file:
export BLAS_LIBS=-lopenblas

# Install necessary SPARCED dependencies
sudo apt install -y openmpi-bin openmpi-common libopenmpi-dev \
		gcc libopenblas-dev g++ cmake make python3-pip pipx \
		libgfortran5 libatomic1 swig libhdf5-dev libsbml-dev

# Installs python dependencies to run the SPARCED-tools 
conda env create -f environment.yml

# Activate the conda environment
source activate sparced

```


Congratulations! You now have a full setup of SPARCED! ü¶†
